// generated by h_to_main.sh -- do not edit

#include "ifdh.h"

#include <string.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector>
using namespace std;
extern "C" { void exit(int); }
static int di(int i)	{ exit(i);  return 1; }
static int ds(string s)	 { cout << s << "\n"; return 1; }
static int dv(vector<string> v)	{ for(int i = 0; i < v.size(); i++) { cout << v[i] << "\n"; } return 1; }

int
main(int argc, char **argv) { 
	ifdh i(getenv("IFDH_BASE_URI"));
	try {
	if (0 == strcmp(argv[1],"cp")) di(i.cp( argv[2]?argv[2]:"", argv[3]?argv[3]:""));
	else if (0 == strcmp(argv[1],"fetchInput")) ds(i.fetchInput( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"addOutputFile")) di(i.addOutputFile( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"copyBackOutput")) di(i.copyBackOutput( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"log")) di(i.log( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"enterState")) di(i.enterState( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"leaveState")) di(i.leaveState( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"createDefinition")) di(i.createDefinition( argv[2]?argv[2]:"", argv[3]?argv[3]:"", argv[4]?argv[4]:"", argv[5]?argv[5]:""));
	else if (0 == strcmp(argv[1],"deleteDefinition")) di(i.deleteDefinition( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"describeDefinition")) ds(i.describeDefinition( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"translateConstraints")) dv(i.translateConstraints( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"locateFile")) dv(i.locateFile( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"getMetadata")) ds(i.getMetadata( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"dumpStation")) ds(i.dumpStation( argv[2]?argv[2]:"", argv[3]?argv[3]:""));
	else if (0 == strcmp(argv[1],"startProject")) ds(i.startProject( argv[2]?argv[2]:"", argv[3]?argv[3]:"", argv[4]?argv[4]:"", argv[5]?argv[5]:"", argv[6]?argv[6]:""));
	else if (0 == strcmp(argv[1],"findProject")) ds(i.findProject( argv[2]?argv[2]:"", argv[3]?argv[3]:""));
	else if (0 == strcmp(argv[1],"establishProcess")) ds(i.establishProcess( argv[2]?argv[2]:"", argv[3]?argv[3]:"", argv[4]?argv[4]:"", argv[5]?argv[5]:"", argv[6]?argv[6]:"", argv[7]?argv[7]:"", argv[8]?argv[8]:"", argv[9]?atol(argv[9]):-1));
	else if (0 == strcmp(argv[1],"getNextFile")) ds(i.getNextFile( argv[2]?argv[2]:"", argv[3]?argv[3]:""));
	else if (0 == strcmp(argv[1],"updateFileStatus")) ds(i.updateFileStatus( argv[2]?argv[2]:"", argv[3]?argv[3]:"", argv[4]?argv[4]:"", argv[5]?argv[5]:""));
	else if (0 == strcmp(argv[1],"endProcess")) di(i.endProcess( argv[2]?argv[2]:"", argv[3]?argv[3]:""));
	else if (0 == strcmp(argv[1],"dumpProcess")) ds(i.dumpProcess( argv[2]?argv[2]:"", argv[3]?argv[3]:""));
	else if (0 == strcmp(argv[1],"setStatus")) di(i.setStatus( argv[2]?argv[2]:"", argv[3]?argv[3]:"", argv[4]?argv[4]:""));
	else if (0 == strcmp(argv[1],"endProject")) di(i.endProject( argv[2]?argv[2]:""));
	else if (0 == strcmp(argv[1],"cleanup")) di(i.cleanup());
	else {

                cout << "\tcp  src  dest \n\t--general copy\n";
                cout << "\tfetchInput  src_uri \n\t--file input\n";
                cout << "\taddOutputFile  filename \n\t--file output\n";
                cout << "\tcopyBackOutput  dest_dir \n\t--file output\n";
                cout << "\tlog  message \n\t--logging \n";
                cout << "\tenterState  state \n\t--logging \n";
                cout << "\tleaveState  state \n\t--logging \n";
                cout << "\tcreateDefinition  name  dims  user  group \n\t--logging \n";
                cout << "\tdeleteDefinition  name \n\t--logging \n";
                cout << "\tdescribeDefinition  name \n\t--logging \n";
                cout << "\ttranslateConstraints  dims \n\t--logging \n";
                cout << "\tlocateFile  name \n\t--files \n";
                cout << "\tgetMetadata  name \n\t--files \n";
                cout << "\tdumpStation  name  what  \n\t-- \n";
                cout << "\tstartProject  name  station  defname_or_id  user  group \n\t--projects \n";
                cout << "\tfindProject  name  station \n\t--projects \n";
                cout << "\testablishProcess  projecturi  appname  appversion  location  user  appfamily   description   filelimit  \n\t--projects \n";
                cout << "\tgetNextFile  projecturi  processid \n\t--projects \n";
                cout << "\tupdateFileStatus  projecturi  processid  filename  status \n\t--projects \n";
                cout << "\tendProcess  projecturi  processid \n\t--projects \n";
                cout << "\tdumpProcess  projecturi  processid \n\t--projects \n";
                cout << "\tsetStatus  projecturi  processid  status \n\t--projects \n";
                cout << "\tendProject  projecturi \n\t--projects \n";
                cout << "\tcleanup  \n\t--projects \n";
		exit(1);	
	}
} catch (WebAPIException we) {
      std::cout << "Exception:" << &we << std::endl;
      exit(1);}
}
