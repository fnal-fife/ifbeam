#!/bin/sh

hdr=$1

xlate=false

# ignore parens and commas
IFS="(),$IFS"

else=""
while read type func args 
do

    docall=false

    case "$type" in
    //)
 	lastcomment="$func $args"
        ;;
    public:)
        printf "// generated by h_to_main.sh -- do not edit\n\n"
	printf "#include \"$hdr\"\n\n"
	printf "#include <string.h>\n"
	printf "#include <stdlib.h>\n"
	printf "#include <iostream>\n"
	printf "#include <string>\n"
	printf "#include <vector>\n"
        printf "using namespace std;\n"
        printf "extern \"C\" { void exit(int); }\n"
        printf "static int di(int i)\t{ exit(i);  return 1; }\n"
        printf "static int ds(string s)\t { cout << s << \"\\\\n\"; return 1; }\n"
        printf "static int dv(vector<string> v)\t{ for(int i = 0; i < v.size(); i++) { cout << v[i] << \"\\\\n\"; } return 1; }\n"
        printf "\n"

        printf "int\nmain(int argc, char **argv) { \n"
        printf "\tifdh i(getenv(\"IFDH_BASE_URI\"));\n"
        printf "\ttry {\n"
	xlate=true;
	;;
    \}\;)
        $xlate || continue
	printf "\telse {\n$help\n\t\texit(1);\t\n\t}\n"
        printf "} catch (WebAPIException we) {\n"
        printf "      std::cout << \"Exception:\" << &we << std::endl;\n"
        printf "      exit(1);"
        printf "}\n"
	printf "}\n"
        ;;
    int)
        pfunc="di"
        docall=true;
        ;;       
    std::string)
        pfunc="ds"
        docall=true
        ;;
    std::vector*std::string*)
        pfunc="dv"
        docall=true;
        ;;
    esac

    $xlate || continue
    if $docall
    then
        cargs=`echo $args | perl -pe 's/std::string//g; s/= ".*?"//g; s/= -1//g; s/;.*//; s/int ([a-z]*)/atol_$1/g;'`
        args=`echo $args | perl -pe 's/std::string//g; s/= ".*?"//g; s/= -1//g; s/;.*//; s/int//g;'`
        echo "cargs are now: $cargs" >&2
        help="$help
                cout << \"\\\\t$func $args\\\\n\\\\t--$lastcomment\\\n\";"
	printf "\t${else}if (0 == strcmp(argv[1],\"$func\")) $pfunc(i.$func("
        else="else "
        i=2
        sep=""
        for a in $cargs 
        do 
            case $a in
            atol*)
                 echo "saw atol case" >&2
                 printf "$sep argv[$i]?atol(argv[$i]):-1"; 
                 ;;
            *)
                 printf "$sep argv[$i]?argv[$i]:\"\""; 
                 ;;
            esac
	    sep="," 
	    i=$((i + 1))
	done
        printf "));\n"
    fi   

done < $hdr

